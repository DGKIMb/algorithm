#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

int n, m;
int mat[101][101];
int visited[101][101];
int dy[] = {-1, 0, 1, 0};
int dx[] = {0, 1, 0, -1};
int cnt1, cnt2, num, prevc;
int f;

void dfsa(int y, int x, int num) {
	mat[y][x] = num;
	visited[y][x] = 1;
	
	for (int i=0; i<4; i++) {
		int ny = y + dy[i];
		int nx = x + dx[i];
		if (nx < 0 || nx >= m || ny < 0 || ny >= n) {
			continue;
		}
		if (mat[ny][nx] == 0 && visited[ny][nx] == 0) {
			dfsa(ny,nx, num);
		}
	}
}

void dfsc(int y, int x) {
	visited[y][x] = 1;
	cnt2++;
	for (int i=0; i<4; i++) {
		int ny = y + dy[i];
		int nx = x + dx[i];
		if (ny < 0 || ny >= n || nx < 0 || nx >= m) {
			continue;
		}
		if (visited[ny][nx] == 0 && mat[ny][nx] == 1) {
			dfsc(ny,nx);
		}
	}
}



int main(){
	
	cin >> n >> m;
	for (int i=0; i<n; i++) {
		for (int j=0; j<m; j++) {
			cin >> mat[i][j];
		}
	}
	
	num = 2;
	dfsa(0,0, num);
	memset(visited, 0, sizeof(visited));
	
	while (1) {
		f = 0;
				
		cnt2 = 0;
		for (int i=0; i<n; i++) {
			for (int j=0; j<m; j++) {
				if (mat[i][j] == 1 && visited[i][j]==0) {
					dfsc(i,j);
				}
			}
		}
		memset(visited, 0, sizeof(visited));
		
		for (int i=0; i<n; i++) {
			for (int j=0; j<m; j++) {
				if (mat[i][j] == 1) {
					for (int k=0; k<4; k++) {
						int ny = i + dy[k];
						int nx = j + dx[k];
						if (ny < 0 || ny >= n || nx < 0 || nx >= m) {
							continue;
						}
						if (mat[ny][nx] == num) {
							mat[i][j] = num + 1;
							f = 1;
						}
					}
				}
			}
		}
		
		for (int i=0; i<n; i++) {
			for (int j=0; j<m; j++) {
				if (mat[i][j] == 0) {
					for (int k=0; k<4; k++) {
						int ny = i + dy[k];
						int nx = j + dx[k];
						if (ny < 0 || ny >= n || nx <0 || nx >= m) {
							continue;
						}
						if (mat[ny][nx] == num + 1) {
							dfsa(i,j,num+1);
						}
					}
				}
			}
		}
		
		memset(visited, 0, sizeof(visited));
		num++;
		
		
		
		if (f == 1) {
			cnt1++;
		}
		else if (f == 0) {
			break;
		}
		prevc = cnt2;
		
	}
	
	cout << cnt1 << "\n" << prevc << "\n";
	

    return 0;
}

