#include <bits/stdc++.h>
using namespace std;
typedef long long ll;


int n;
int mat[101][101];
int visited[101][101];
int ret;
int maxret;


int dy[] = {-1, 0, 1, 0};
int dx[] = {0, 1, 0, -1};

void dfs(int y, int x, int height) {
	visited[y][x] = 1;
	
	for (int i=0; i<4; i++) {
		int ny = y + dy[i];
		int nx = x + dx[i];
		if (ny < 0 || ny >= n || nx < 0 || nx >= n) {
			continue;
		}
		if (mat[ny][nx] > height && visited[ny][nx] == 0) {
			dfs(ny, nx, height);

		}
		
	}
}

int main() {
	
	cin >> n;
	int height = 0;
	
	for (int i=0; i<n; i++) {
		for (int j=0; j<n; j++) {
			cin >> mat[i][j];
			height = max(mat[i][j], height);
		}
	}

	for (int i=0; i<height; i++) {
		for (int j=0; j<n; j++) {
			for (int k=0; k<n; k++) {
				if (mat[j][k] > i && visited[j][k] == 0) {
					dfs(j,k,i);
					ret++;
				}
			}
		}
		maxret = max(ret, maxret);
		ret = 0;
		memset(visited, 0, sizeof(visited));
		
	}
	
	cout << maxret << "\n";
	
	
	
	return 0;
}	
