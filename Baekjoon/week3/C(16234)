#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

int n, l, r, sum, cnt;
int mat[51][51];
int visited[51][51];
int dy[] = {-1, 0, 1, 0};
int dx[] = {0, 1, 0, -1};
vector<pair<int, int>> v;

void dfs(int y, int x, vector<pair<int,int>> &v) {
	for (int i=0; i<4; i++) {
		int ny = y + dy[i];
		int nx = x + dx[i];
		if (ny < 0 || ny >= n || nx < 0 || nx >= n || visited[ny][nx]) continue;
		if (abs(mat[ny][nx] - mat[y][x]) >= l && abs(mat[ny][nx] - mat[y][x]) <= r) {
			visited[ny][nx] = 1;
			v.push_back({ny,nx});
			sum += mat[ny][nx];
			dfs(ny,nx,v);
		}
	}
}

int main() {
	

	cin >> n >> l >> r;
	for (int i=0; i<n; i++) {
		for (int j=0; j<n; j++) {
			cin >> mat[i][j];
		}
	}
	
	while (1) {
		bool f = 0;
		memset(visited, 0, sizeof(visited));
		for (int i=0; i<n; i++) {
			for (int j=0; j<n; j++) {
				if (visited[i][j] == 0) {
					v.clear();
					visited[i][j] = 1;
					v.push_back({i,j});
					sum = mat[i][j];
					dfs(i,j,v);
					if (v.size() == 1) continue;
					for (auto it : v) {
						mat[it.first][it.second] = sum / v.size();
						f = 1;
					}
				}
			}
		}
		if (f == 0) break;
		cnt++;
	}
	
	cout << cnt << "\n";

    return 0;
}


