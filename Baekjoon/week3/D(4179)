#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int INF = 987654321;

int n, m, sx, sy;
char mat[1001][1001];
int fire[1001][1001], person[1001][1001];
int dy[] = {-1,0,1,0};
int dx[] = {0,1,0,-1};
int ret;

bool in (int a, int b) {
	return a >= 0 && a < n && b >= 0 && b < m;
}

int main() {
	
	queue<pair<int,int>> q;
	cin >> n >> m;
	fill(&fire[0][0], &fire[0][0] + 1001*1001, INF);
	for (int i=0; i<n; i++) {
		for (int j=0; j<m; j++) {
			cin >> mat[i][j];
			if (mat[i][j] == 'F') {
				fire[i][j] = 1;
				q.push({i,j});
			} else if (mat[i][j] == 'J') {
				sy = i, sx = j;
			}
		}
	}
	
	while (q.size()) {
		int y = q.front().first;
		int x = q.front().second;
		q.pop();
		for (int i=0; i<4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];
			if (!in(ny,nx)) continue;
			if (fire[ny][nx] != INF || mat[ny][nx] == '#') continue;
			fire[ny][nx] = fire[y][x] + 1;
			q.push({ny,nx});
		}
		
	}
	
	person[sy][sx] = 1;
	q.push({sy,sx});
	while (q.size()) {
		int y = q.front().first;
		int x = q.front().second;
		q.pop();
		if (y == n-1 || y == 0 || x == m-1 || x == 0) {
			ret = person[y][x];
			break;
		}
		for (int i=0; i<4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];
			if (!in(ny,nx)) continue;
			if (person[ny][nx] || mat[ny][nx] == '#') continue;
			if (person[y][x] + 1 >= fire[ny][nx]) continue;
			person[ny][nx] = person[y][x] + 1;
			q.push({ny, nx});
		}
	}
	
	if (ret != 0) cout << ret << "\n";
	else cout << "IMPOSSIBLE \n";
	
	
	
    return 0;
}


