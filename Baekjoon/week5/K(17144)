#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
int const INF = 987654321;

int mat[51][51];
int temp[51][51];
int t, n, m;
int dy[] = {-1,0,1,0};
int dx[] = {0,1,0,-1};
vector<pair<int,int>> v;

void dust(int y, int x) {
	int cnt = 0;
	for (int i=0; i<4; i++) {
		int ny = y + dy[i];
		int nx = x + dx[i];
		if (mat[ny][nx] == -1 || ny < 0 || ny >= n || nx < 0 || nx >= m) continue;
		cnt++;
		temp[ny][nx] += mat[y][x] / 5;
	}
	
	mat[y][x] -= (mat[y][x]/5 * cnt);
}


int main(){
	
	cin >> n >> m >> t;
	for (int i=0; i<n; i++) {
		for (int j=0; j<m; j++) {
			cin >> mat[i][j];
			if (mat[i][j] == -1) {
				v.push_back({i,j});
			}
		}
	}
	
	for (int l=0; l<t; l++) {
		memset(temp,0,sizeof(temp));
		
		for (int j=0; j<n; j++) {
			for(int k=0; k<m; k++) {
				if (mat[j][k] >= 5) dust(j,k);
			}
		}
		
		for (int j=0; j<n; j++) {
			for (int k=0; k<m; k++) {
				mat[j][k] += temp[j][k];
			}
		}
		
		int y = v[0].first;
		int x = v[0].second;
		int tmp = 0;

		for (int i=y-1; i>=1; i--) {
			mat[i][0] = mat[i-1][0];
		}
		
		for (int i=0; i<m-1; i++) {
			mat[0][i] = mat[0][i+1];
		}
		
		for (int i=0; i<y; i++) {
			mat[i][m-1] = mat[i+1][m-1];
		}
		
		for (int i=m-1; i>1; i--) {
			mat[y][i] = mat[y][i-1];
		}
		
		mat[y][1] = 0;
		
		x = v[1].second;
		y = v[1].first;
		
		for (int i=y+1; i<n-1; i++) {
			mat[i][0] = mat[i+1][0];
		}
		
		for (int i=0; i<m-1; i++) {
			mat[n-1][i] = mat[n-1][i+1];
		}
		
		for (int i=n-1; i>y; i--) {
			mat[i][m-1] = mat[i-1][m-1];
		}
		
		for (int i=m-1; i>1; i--) {
			mat[y][i] = mat[y][i-1];
		}
		mat[y][1] = 0;
	}
	
	int ret = 0;

	for (int i=0; i<n; i++) {
		for (int j=0; j<m; j++) {
			ret+= mat[i][j];
		}
	}
	
	cout << ret + 2;
	
    return 0;
}

