#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int INF = 987654321;

int n, m, t;
int a[51][51];
int visited[51][51];
int x,d,k;
int dy[] = {-1,0,1,0};
int dx[] = {0,1,0,-1};
int f, check;

void dfs(int y, int x) {
	
	for (int i=0; i<4; i++) {
		int ny = y + dy[i];
		int nx = x + dx[i];
		if (nx < 0) nx += m; 
		else if (nx == m) nx = 0;
		if (ny < 0 || ny >= n || visited[ny][nx] || a[ny][nx] == 0) continue;
		if (a[y][x] == a[ny][nx]) {
			visited[ny][nx] = visited[y][x] = 1;
			check++, dfs(ny,nx);
		}
	}
}

int main() {
	
	cin >> n >> m >> t;
	for (int i=0; i<n; i++) {
		for (int j=0; j<m; j++) {
			cin >> a[i][j];
		}
	}
	
	
	
	for (int o=0; o<t; o++) {
		cin >> x >> d >> k;
		vector<int> num;
		for (int i=x; i<=n; i+=x) {
			num.push_back(i-1);
		}
		
		check = 0;
		memset(visited,0,sizeof(visited));
		if (d == 0) {
			for (int _num : num) {
				rotate(&a[_num][0], &a[_num][0] + m-k, &a[_num][0] + m);
			}
			
			
			for (int i=0; i<n; i++) {
				for (int j=0; j<m; j++) {
					if(visited[i][j] == 0 && a[i][j] != 0) {
						f=0;
						dfs(i,j);
						if (f>1) a[i][j] = 0;
					}
				}
			}
			
		}
		else if (d == 1) {
			for (int _num : num) {
				rotate(&a[_num][0], &a[_num][0] + k, &a[_num][0] + m);
			}

			
			for (int i=0; i<n; i++) {
				for (int j=0; j<m; j++) {
					if (visited[i][j] == 0 && a[i][j] != 0) {
						f=0;
						dfs(i,j);
						
					}
				}
			}
		}
		
		
		for (int i=0; i<n; i++) {
			for (int j=0; j<m; j++) {
				if (visited[i][j] == 1) a[i][j] = 0;
			}
		}
		
		
		
		if (check == 0) {
			int cnt = 0;
			double avg = 0;
			for (int i=0; i<n; i++) {
				for (int j=0; j<m; j++) {
					if (a[i][j] != 0) {
						avg+=a[i][j];
						cnt++;
					}
				}
			}
			avg = avg / (double)cnt;
			for (int i=0; i<n; i++) {
				for (int j=0; j<m; j++) {
					if ((double)a[i][j] > avg && a[i][j] != 0) a[i][j]--;
					else if ((double)a[i][j] < avg && a[i][j] != 0) a[i][j]++;
				}
			}
		}
		
	}
	
	int ret = 0;
	
	for (int i=0; i<n; i++) {
		for (int j=0; j<m; j++) {
			ret += a[i][j];
		}
	}
	
	cout << ret;
	
	
    return 0;
}
