#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
int const INF = 987654321;

int n, m, rooms, width, mwidth;
int mat[51][51];
int visited[51][51];
int dy[] = {0,-1,0,1};
int dx[] = {-1,0,1,0};
int cnt;

void dfs(int y, int x) {
	visited[y][x] = 1;
	cnt++;
	
	for (int i=0; i<4; i++) {
		if (((1<<i) & mat[y][x]) == 0) {
			int ny = y + dy[i];
			int nx = x + dx[i];
			if (ny < 0 || ny >= n || nx < 0 || nx >= m || visited[ny][nx]) continue;
			dfs(ny,nx);
		}
	}
}

int main() {
	
	cin >> m >> n;
	
	for (int i; i<n; i++) {
		for (int j=0; j<m; j++) {
			cin >> mat[i][j];
		}
	}
	
	for (int i=0; i<n; i++) {
		for (int j=0; j<m; j++) {
			if (visited[i][j] == 0) {
				cnt = 0;
				dfs(i,j);
				width = max(width, cnt);
				rooms++;
			}
		}
	}
	
	for (int i=0; i<n; i++) {
		for (int j=0; j<m; j++) {
			for (int k=1; k<=8; k*=2) {
				memset(visited,0,sizeof(visited));
				int f = 0;
				if (k & mat[i][j]) {
					mat[i][j] -= k;
					f=1;
				}
				for (int a=0; a<n; a++) {
					for (int b=0; b<m; b++) {
						if (visited[a][b] == 0) {
							cnt = 0;
							dfs(a,b);
							mwidth = max(mwidth, cnt);
						}
					}
				}
				
				if (f==1) mat[i][j] += k;
			}
		}
	}
	
	cout << rooms << "\n";
	cout << width << '\n';
	cout << mwidth << '\n';


    return 0;
}
